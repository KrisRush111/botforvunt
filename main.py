import re
import threading
import os
import http.server
import socketserver
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext



from config import TOKEN, ADMIN_CHAT_ID

bot = Bot(TOKEN)
dp = Dispatcher()


def keep_alive():
    port = int(os.environ.get("PORT", 8080))
    handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", port), handler) as httpd:
        print(f"–§–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        httpd.serve_forever()

last_admin_message_id = None



class DeleteAccount(StatesGroup):
    waiting_for_id = State()



@dp.message(Command('start'))
async def start_handler(message: types.Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    await state.clear()

    sent_sticker = await message.answer_sticker(
        "CAACAgIAAxkBAAEBiFNop0zoiN_bQ48fWgZ3-HiwoAichQACMTQAAugboErSr6fEZiaivDYE"
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ TheVuntgram?")],
            [KeyboardButton(text="–î–≤–æ–π–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.first_name}*! –¢—ã –æ—Ç–∫—Ä—ã–ª —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã [TheVuntgram](https://t.me/VuntgramBot). "
        "–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üôÇ\n\n"
        "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, –≥–¥–µ —Ç—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb
    )



@dp.message(F.text == "–ß—Ç–æ —Ç–∞–∫–æ–µ TheVuntgram?")
async def handle_faq_info(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–û –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ TheVuntgram:\nhttps://thevuntgram.vercel.app")


@dp.message(F.text == "–î–≤–æ–π–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç")
async def handle_faq_double(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, "
        "—Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ."
    )



@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def handle_delete_account(message: types.Message, state: FSMContext):
    cancel_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ TheVuntgram",
        reply_markup=cancel_kb
    )
    await state.set_state(DeleteAccount.waiting_for_id)



@dp.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ TheVuntgram?")],
            [KeyboardButton(text="–î–≤–æ–π–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é.",
        reply_markup=kb
    )



@dp.message(DeleteAccount.waiting_for_id)
async def process_account_id(message: types.Message, state: FSMContext):
    user_input = message.text.strip()


    if not user_input.isdigit():
        sent_sticker = await message.answer_sticker(
            "CAACAgIAAxkBAAEBiFdop1VzvX34UgQya0DHpsLunn07FQACcTsAArVDWUo6XMAuPW2eHTYE"
        )
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ ID. ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return


    if len(user_input) < 8:
        sent_sticker = await message.answer_sticker(
            "CAACAgIAAxkBAAEBiFdop1VzvX34UgQya0DHpsLunn07FQACcTsAArVDWUo6XMAuPW2eHTYE"
        )
        await message.answer("‚ùå ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 8 —Ü–∏—Ñ—Ä.")
        return


    await state.clear()


    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ TheVuntgram?")],
            [KeyboardButton(text="–î–≤–æ–π–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π.",
        reply_markup=kb
    )


    admin_text = (f"üö® –ó–ê–ü–†–û–° –ù–ê –£–î–ê–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê\n\n"
                  f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                  f"ID Telegram: {message.from_user.id}\n"
                  f"ID –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {user_input}\n"
                  f"–í—Ä–µ–º—è: {message.date}")

    await bot.send_message(ADMIN_CHAT_ID, admin_text)



@dp.message(Command("reply"))
async def reply_to_user(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_CHAT_ID:
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /reply <user_id> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return

    user_id = int(args[1])
    reply_text = args[2]

    try:
        await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{reply_text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")



@dp.message()
async def forward_to_admin(message: types.Message, state: FSMContext):
    global last_admin_message_id


    current_state = await state.get_state()
    if current_state == DeleteAccount.waiting_for_id:

        if message.text != "–û—Ç–º–µ–Ω–∞":
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞.")
        return

    if message.from_user.id != ADMIN_CHAT_ID:

        text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (ID: {message.from_user.id}):\n\n{message.text}"
        sent_message = await bot.send_message(ADMIN_CHAT_ID, text)


        last_admin_message_id = sent_message.message_id


        await message.answer_sticker("CAACAgIAAxkBAAEBiFVop08nN5c00tl1wFqw0L_nSZgG-QACAzYAAgjOMErEAAH7H5AfVxw2BA")
        await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
    else:

        text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.full_name} (ID: {message.from_user.id}):\n\n{message.text}"
        await bot.send_message(ADMIN_CHAT_ID, text)



@dp.message(Command("reply_admin"))
async def reply_to_admin(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        return

    if last_admin_message_id is None:
        await message.answer("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    reply_text = message.text[len("/reply_admin "):]  # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞

    try:
        await bot.send_message(ADMIN_CHAT_ID, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{reply_text}")
        await bot.edit_message_text(
            text=f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{reply_text}",
            chat_id=ADMIN_CHAT_ID,
            message_id=last_admin_message_id
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")


async def main():
    print("–ë–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

